(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{309:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"tip custom-block"},[a("p",[t._v("锁是java并发编程中最重要的同步机制. 锁除了让临界区互斥执行外, 还可以让释放锁的线程向获取同一个锁的线程发送消息. 下面是锁释放-获取的示例代码:")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000000460772",target:"_blank",rel:"noopener noreferrer"}},[t._v("原文出处 https://segmentfault.com/a/1190000000460772"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"锁的释放-获取建立的-happens-before-关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁的释放-获取建立的-happens-before-关系","aria-hidden":"true"}},[t._v("#")]),t._v(" 锁的释放-获取建立的 happens before 关系")]),t._v(" "),a("p",[t._v("锁是java并发编程中最重要的同步机制. 锁除了让临界区互斥执行外, 还可以让释放锁的线程向获取同一个锁的线程发送消息. 下面是锁释放-获取的示例代码:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MonitorExample")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1")]),t._v("\n        a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("                                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//5")]),t._v("\n        ……\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("                                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//6")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("假设线程A执行writer()方法, 随后线程B执行reader()方法. 根据happens\nbefore规则, 这个过程包含的happens before 关系可以分为两类:")]),t._v(" "),a("ol",[a("li",[t._v("根据程序次序规则, 1 happens before 2, 2 happens before 3; 4 happens before 5, 5 happens before 6.")]),t._v(" "),a("li",[t._v("根据监视器锁规则, 3 happens before 4.")]),t._v(" "),a("li",[t._v("根据happens before 的传递性, 2 happens before 5.")])]),t._v(" "),a("p",[t._v("上述happens before 关系的图形化表现形式如下:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://qiniu.dong4j.info/2019-07-02-bVb4II..",alt:""}})]),t._v(" "),a("p",[t._v("在上图中, 每一个箭头链接的两个节点, 代表了一个happens before 关系. 黑色箭头表示程序顺序规则；橙色箭头表示监视器锁规则；蓝色箭头表示组合这些规则后提供的happens before保证.")]),t._v(" "),a("p",[t._v("上图表示在线程A释放了锁之后, 随后线程B获取同一个锁. 在上图中, 2 happens before 5. 因此, 线程A在释放锁之前所有可见的共享变量, 在线程B获取同一个锁之后, 将立刻变得对B线程可见.")]),t._v(" "),a("h2",{attrs:{id:"锁释放和获取的内存语义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁释放和获取的内存语义","aria-hidden":"true"}},[t._v("#")]),t._v(" 锁释放和获取的内存语义")]),t._v(" "),a("p",[t._v("当线程释放锁时, JMM会把该线程对应的本地内存中的共享变量刷新到主内存中. 以上面的MonitorExample程序为例, A线程释放锁后, 共享数据的状态示意图如下:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://qiniu.dong4j.info/2019-07-02-bVb4IK..",alt:""}})]),t._v(" "),a("p",[t._v("当线程获取锁时, JMM会把该线程对应的本地内存置为无效. 从而使得被监视器保护的临界区代码必须要从主内存中去读取共享变量. 下面是锁获取的状态示意图:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://qiniu.dong4j.info/2019-07-02-bVb4IP..",alt:""}})]),t._v(" "),a("p",[t._v("对比锁释放-获取的内存语义与volatile写-读的内存语义, 可以看出: 锁释放与volatile写有相同的内存语义；锁获取与volatile读有相同的内存语义.")]),t._v(" "),a("p",[t._v("下面对锁释放和锁获取的内存语义做个总结:")]),t._v(" "),a("ul",[a("li",[t._v("线程A释放一个锁, 实质上是线程A向接下来将要获取这个锁的某个线程发出了（线程A对共享变量所做修改的）消息.")]),t._v(" "),a("li",[t._v("线程B获取一个锁, 实质上是线程B接收了之前某个线程发出的（在释放这个锁之前对共享变量所做修改的）消息.")]),t._v(" "),a("li",[t._v("线程A释放锁, 随后线程B获取这个锁, 这个过程实质上是线程A通过主内存向线程B发送消息.")])]),t._v(" "),a("h2",{attrs:{id:"锁内存语义的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁内存语义的实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 锁内存语义的实现")]),t._v(" "),a("p",[t._v("本文将借助ReentrantLock的源代码, 来分析锁内存语义的具体实现机制.")]),t._v(" "),a("p",[t._v("请看下面的示例代码:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLockExample")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),t._v(" lock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取锁")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//释放锁")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" reader "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取锁")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        ……\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//释放锁")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br")])]),a("p",[t._v("在ReentrantLock中, 调用lock()方法获取锁；调用unlock()方法释放锁.")]),t._v(" "),a("p",[t._v("ReentrantLock的实现依赖于java同步器框架AbstractQueuedSynchronizer（本文简称之为AQS）. AQS使用一个整型的volatile变量（命名为state）来维护同步状态, 马上我们会看到, 这个volatile变量是ReentrantLock内存语义实现的关键.  下面是ReentrantLock的类图（仅画出与本文相关的部分）:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://qiniu.dong4j.info/2019-07-02-bVb4IS..",alt:""}})]),t._v(" "),a("p",[t._v("ReentrantLock分为公平锁和非公平锁, 我们首先分析公平锁.")]),t._v(" "),a("p",[t._v("使用公平锁时, 加锁方法lock()的方法调用轨迹如下:")]),t._v(" "),a("ol",[a("li",[t._v("ReentrantLock : lock()")]),t._v(" "),a("li",[t._v("FairSync : lock()")]),t._v(" "),a("li",[t._v("AbstractQueuedSynchronizer : acquire(int arg)")]),t._v(" "),a("li",[t._v("ReentrantLock : tryAcquire(int acquires)")])]),t._v(" "),a("p",[t._v("在第4步真正开始加锁, 下面是该方法的源代码:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryAcquire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" acquires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" current "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取锁的开始, 首先读volatile变量state")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSetState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" acquires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setExclusiveOwnerThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getExclusiveOwnerThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nextc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" acquires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Maximum lock count exceeded"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])]),a("p",[t._v("从上面源代码中我们可以看出, 加锁方法首先读volatile变量state.")]),t._v(" "),a("p",[t._v("在使用公平锁时, 解锁方法unlock()的方法调用轨迹如下:")]),t._v(" "),a("ol",[a("li",[t._v("ReentrantLock : unlock()")]),t._v(" "),a("li",[t._v("AbstractQueuedSynchronizer : release(int arg)")]),t._v(" "),a("li",[t._v("Sync : tryRelease(int releases)")])]),t._v(" "),a("p",[t._v("在第3步真正开始释放锁, 下面是该方法的源代码:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryRelease")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" releases"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" releases"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getExclusiveOwnerThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalMonitorStateException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" free "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        free "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setExclusiveOwnerThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//释放锁的最后, 写volatile变量state")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" free"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("从上面的源代码我们可以看出, 在释放锁的最后写volatile变量state.")]),t._v(" "),a("p",[t._v("公平锁在释放锁的最后写volatile变量state；在获取锁时首先读这个volatile变量. 根据volatile的happens-before规则, 释放锁的线程在写volatile变量之前可见的共享变量, 在获取锁的线程读取同一个volatile变量后将立即变的对获取锁的线程可见.")]),t._v(" "),a("p",[t._v("现在我们分析非公平锁的内存语义的实现.")]),t._v(" "),a("p",[t._v("非公平锁的释放和公平锁完全一样, 所以这里仅仅分析非公平锁的获取.")]),t._v(" "),a("p",[t._v("使用非公平锁时, 加锁方法lock()的方法调用轨迹如下:")]),t._v(" "),a("ol",[a("li",[t._v("ReentrantLock : lock()")]),t._v(" "),a("li",[t._v("NonfairSync : lock()")]),t._v(" "),a("li",[t._v("AbstractQueuedSynchronizer : compareAndSetState(int expect, int update)")])]),t._v(" "),a("p",[t._v("在第3步真正开始加锁, 下面是该方法的源代码:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSetState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" expect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" update"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSwapInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stateOffset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" expect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" update"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("该方法以原子操作的方式更新state变量, 本文把java的compareAndSet()方法调用简称为CAS. JDK文档对该方法的说明如下: 如果当前状态值等于预期值, 则以原子方式将同步状态设置为给定的更新值. 此操作具有 volatile 读和写的内存语义.")]),t._v(" "),a("p",[t._v("这里我们分别从编译器和处理器的角度来分析,CAS如何同时具有volatile读和volatile写的内存语义.")]),t._v(" "),a("p",[t._v("前文我们提到过, 编译器不会对volatile读与volatile读后面的任意内存操作重排序；编译器不会对volatile写与volatile写前面的任意内存操作重排序. 组合这两个条件, 意味着为了同时实现volatile读和volatile写的内存语义, 编译器不能对CAS与CAS前面和后面的任意内存操作重排序.")]),t._v(" "),a("p",[t._v("下面我们来分析在常见的intel x86处理器中, CAS是如何同时具有volatile读和volatile写的内存语义的.")]),t._v(" "),a("p",[t._v("下面是sun.misc.Unsafe类的compareAndSwapInt()方法的源代码:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSwapInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" offset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                              "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" expected"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                              "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("可以看到这是个本地方法调用. 这个本地方法在openjdk中依次调用的c++代码为: unsafe.cpp, "),a("code",[t._v("atomic.cpp和atomic*windows*x86.inline.hpp")]),t._v(". 这个本地方法的最终实现在openjdk的如下位置: "),a("code",[t._v("openjdk-7-fcs-src-b147-27*jun*2011\\openjdk\\hotspot\\src\\os*cpu\\windows*x86\\vm\\atomic*windows*x86.inline.hpp")]),t._v("（对应于windows操作系统, X86处理器）. 下面是对应于intel x86处理器的源代码的片段:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Adding a lock prefix to an instruction on MP machine")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// VC++ doesn't like the lock prefix to be on a single line")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// so we can't insert a label after the lock prefix.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// By emitting a lock prefix, we can define a label after it.")]),t._v("\n#define "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LOCK_IF_MP")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" __asm cmp mp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  \\\n                       __asm je L0      \\\n                       __asm _emit "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xF0")]),t._v(" \\\n                       __asm L0"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\ninline jint     "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Atomic")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cmpxchg")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jint     exchange_value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" jint"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("     dest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" jint     compare_value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// alternative for InterlockedCompareExchange")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" os"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is_MP")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  __asm "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    mov edx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dest\n    mov ecx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" exchange_value\n    mov eax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" compare_value\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LOCK_IF_MP")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    cmpxchg dword ptr "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("edx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ecx\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br")])]),a("p",[t._v("如上面源代码所示, 程序会根据当前处理器的类型来决定是否为cmpxchg指令添加lock前缀. 如果程序是在多处理器上运行, 就为cmpxchg指令加上lock前缀（lock cmpxchg）. 反之, 如果程序是在单处理器上运行, 就省略lock前缀（单处理器自身会维护单处理器内的顺序一致性, 不需要lock前缀提供的内存屏障效果）.")]),t._v(" "),a("p",[t._v("intel的手册对lock前缀的说明如下:")]),t._v(" "),a("ol",[a("li",[t._v("确保对内存的读-改-写操作原子执行. 在Pentium及Pentium之前的处理器中, 带有lock前缀的指令在执行期间会锁住总线, 使得其他处理器暂时无法通过总线访问内存. 很显然, 这会带来昂贵的开销. 从Pentium 4, Intel Xeon及P6处理器开始, intel在原有总线锁的基础上做了一个很有意义的优化: 如果要访问的内存区域（area of memory）在lock前缀指令执行期间已经在处理器内部的缓存中被锁定（即包含该内存区域的缓存行当前处于独占或以修改状态）, 并且该内存区域被完全包含在单个缓存行（cache line）中, 那么处理器将直接执行该指令. 由于在指令执行期间该缓存行会一直被锁定, 其它处理器无法读/写该指令要访问的内存区域, 因此能保证指令执行的原子性. 这个操作过程叫做缓存锁定（cache locking）, 缓存锁定将大大降低lock前缀指令的执行开销, 但是当多处理器之间的竞争程度很高或者指令访问的内存地址未对齐时, 仍然会锁住总线.")]),t._v(" "),a("li",[t._v("禁止该指令与之前和之后的读和写指令重排序.")]),t._v(" "),a("li",[t._v("把写缓冲区中的所有数据刷新到内存中.")])]),t._v(" "),a("p",[t._v("上面的第2点和第3点所具有的内存屏障效果, 足以同时实现volatile读和volatile写的内存语义.")]),t._v(" "),a("p",[t._v("经过上面的这些分析, 现在我们终于能明白为什么JDK文档说CAS同时具有volatile读和volatile写的内存语义了.")]),t._v(" "),a("p",[t._v("现在对公平锁和非公平锁的内存语义做个总结:")]),t._v(" "),a("ul",[a("li",[t._v("公平锁和非公平锁释放时, 最后都要写一个volatile变量state.")]),t._v(" "),a("li",[t._v("公平锁获取时, 首先会去读这个volatile变量.")]),t._v(" "),a("li",[t._v("非公平锁获取时, 首先会用CAS更新这个volatile变量,这个操作同时具有volatile读和volatile写的内存语义.")])]),t._v(" "),a("p",[t._v("从本文对ReentrantLock的分析可以看出, 锁释放-获取的内存语义的实现至少有下面两种方式:")]),t._v(" "),a("ol",[a("li",[t._v("利用volatile变量的写-读所具有的内存语义.")]),t._v(" "),a("li",[t._v("利用CAS所附带的volatile读和volatile写的内存语义.")])]),t._v(" "),a("h2",{attrs:{id:"concurrent包的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concurrent包的实现","aria-hidden":"true"}},[t._v("#")]),t._v(" concurrent包的实现")]),t._v(" "),a("p",[t._v("由于java的CAS同时具有 volatile 读和volatile写的内存语义, 因此Java线程之间的通信现在有了下面四种方式:")]),t._v(" "),a("ol",[a("li",[t._v("A线程写volatile变量, 随后B线程读这个volatile变量.")]),t._v(" "),a("li",[t._v("A线程写volatile变量, 随后B线程用CAS更新这个volatile变量.")]),t._v(" "),a("li",[t._v("A线程用CAS更新一个volatile变量, 随后B线程用CAS更新这个volatile变量.")]),t._v(" "),a("li",[t._v("A线程用CAS更新一个volatile变量, 随后B线程读这个volatile变量.")])]),t._v(" "),a("p",[t._v("Java的CAS会使用现代处理器上提供的高效机器级别原子指令, 这些原子指令以原子方式对内存执行读-改-写操作, 这是在多处理器中实现同步的关键（从本质上来说, 能够支持原子性读-改-写指令的计算机器, 是顺序计算图灵机的异步等价机器, 因此任何现代的多处理器都会去支持某种能对内存执行原子性读-改-写操作的原子指令）. 同时, volatile变量的读/写和CAS可以实现线程之间的通信. 把这些特性整合在一起, 就形成了整个concurrent包得以实现的基石. 如果我们仔细分析concurrent包的源代码实现, 会发现一个通用化的实现模式:")]),t._v(" "),a("ol",[a("li",[t._v("首先, 声明共享变量为volatile；")]),t._v(" "),a("li",[t._v("然后, 使用CAS的原子条件更新来实现线程之间的同步；")]),t._v(" "),a("li",[t._v("同时, 配合以volatile的读/写和CAS所具有的volatile读和写的内存语义来实现线程之间的通信.")])]),t._v(" "),a("p",[t._v("AQS, 非阻塞数据结构和原子变量类（java.util.concurrent.atomic包中的类）, 这些concurrent包中的基础类都是使用这种模式来实现的, 而concurrent包中的高层类又是依赖于这些基础类来实现的. 从整体来看, concurrent包的实现示意图如下:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://qiniu.dong4j.info/2019-07-02-bVb4I0..",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"参考文献"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文献","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"http://www.amazon.com/Concurrent-Programming-Java-Principles-Pattern/dp/0201310090/ref=sr_1_1?s=books&ie=UTF8&qid=1341416393&sr=1-1&keywords=Concurrent+Programming+in+Java+Design+Principles+and+Patterns",target:"_blank",rel:"noopener noreferrer"}},[t._v(" Concurrent Programming in Java: Design Principles and Pattern"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.cs.umd.edu/users/pugh/java/memoryModel/jsr-133-faq.html",target:"_blank",rel:"noopener noreferrer"}},[t._v(" JSR 133 (Java Memory Model) FAQ"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v(" JSR-133: Java Memory Model and Thread Specification"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601/ref=pd_sim_b_1",target:"_blank",rel:"noopener noreferrer"}},[t._v(" Java Concurrency in Practice"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://docs.oracle.com/javase/6/docs/api/",target:"_blank",rel:"noopener noreferrer"}},[t._v(" Java™ Platform, Standard Edition 6 API Specification"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://gee.cs.oswego.edu/dl/jmm/cookbook.html",target:"_blank",rel:"noopener noreferrer"}},[t._v(" The JSR-133 Cookbook for Compiler Writers"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://download.intel.com/products/processor/manual/253668.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v(" Intel® 64 and IA-32 ArchitecturesvSoftware Developer’s Manual Volume 3A: System Programming Guide, Part 1"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.amazon.com/Art-Multiprocessor-Programming-Maurice-Herlihy/dp/0123705916/ref=sr_1_1?ie=UTF8&s=books&qid=1248834374&sr=1-1",target:"_blank",rel:"noopener noreferrer"}},[t._v(" The Art of Multiprocessor Programming"),a("OutboundLink")],1)])])])},[],!1,null,null,null);s.default=e.exports}}]);