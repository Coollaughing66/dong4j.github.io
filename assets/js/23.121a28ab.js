(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{278:function(s,a,t){"use strict";t.r(a);var n=t(0),e=Object(n.a)({},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("div",{staticClass:"tip custom-block"},[t("p",[s._v("记录一次内存优化的过程")])]),s._v(" "),t("h3",{attrs:{id:"内存优化对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存优化对比","aria-hidden":"true"}},[s._v("#")]),s._v(" 内存优化对比")]),s._v(" "),t("p",[t("strong",[s._v("数据量")])]),s._v(" "),t("blockquote",[t("p",[s._v("外呼名单 10万\n白名单 100万\n黑名单 500万")])]),s._v(" "),t("p",[t("strong",[s._v("JVM 参数")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("-verbose:gc \n-XX:+HeapDumpOnOutOfMemoryError \n-server \n-Xms1g \n-Xmx1g \n-XX:PermSize=512m \n-XX:SurvivorRatio=2 \n-XX:+UseParallelGC\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h4",{attrs:{id:"优化之前"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化之前","aria-hidden":"true"}},[s._v("#")]),s._v(" 优化之前")]),s._v(" "),t("p",[t("strong",[s._v("对比耗时")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("2018-05-31 15:29:49 [INFO]] [pool-1-thread-1] [parseRegulation] 白名单匹配个数 = 25\n2018-05-31 15:29:50 [INFO]] [pool-1-thread-1] [parseRegulation] 黑名单匹配个数 = 189\nStopWatch '': running time (millis) = 906\n-----------------------------------------\nms     %     Task name\n-----------------------------------------\n00906  100%  对比\n\n...\n\ndiffList.size = 99810\ntelNos.size = 99810\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[t("strong",[s._v("内存消耗")])]),s._v(" "),t("p",[s._v("启动时第一次运行解析任务, 并且符合条件的 calloutList 为 99810;")]),s._v(" "),t("p",[s._v("最高使用 "),t("code",[s._v("762.5")]),s._v(" M")]),s._v(" "),t("p",[t("img",{attrs:{src:"http://qiniu.dong4j.info/2019-07-03-15277518913397.jpg",alt:""}})]),s._v(" "),t("p",[s._v("持续运行一段时间, 并且使用相同的号码包进行测试的结果")]),s._v(" "),t("p",[s._v("发生了 OOM")]),s._v(" "),t("p",[t("img",{attrs:{src:"http://qiniu.dong4j.info/2019-07-03-15277542328808.jpg",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"优化之后"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化之后","aria-hidden":"true"}},[s._v("#")]),s._v(" 优化之后")]),s._v(" "),t("p",[t("strong",[s._v("对比耗时")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("2018-05-31 15:46:45 [INFO]] [pool-1-thread-1] [dealWhiteAndBlackList] 白名单匹配个数 = 25\n2018-05-31 15:46:45 [INFO]] [pool-1-thread-1] [dealWhiteAndBlackList] 白名单匹配个数 = 189\nStopWatch '': running time (millis) = 109\n-----------------------------------------\nms     %     Task name\n-----------------------------------------\n00109  100%  对比\n\n...\n\ndiffList.size = 99810\ntelNos.size = 99810\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[t("strong",[s._v("内存消耗")])]),s._v(" "),t("p",[s._v("启动时第一次运行解析任务, 并且符合条件的 calloutList 为 99810;")]),s._v(" "),t("p",[s._v("最高 "),t("code",[s._v("728")]),s._v(" M")]),s._v(" "),t("p",[t("img",{attrs:{src:"http://qiniu.dong4j.info/2019-07-03-15277538181567.jpg",alt:""}})]),s._v(" "),t("p",[s._v("持续运行一段时间, 并且使用相同的号码包进行测试的结果")]),s._v(" "),t("p",[t("img",{attrs:{src:"http://qiniu.dong4j.info/2019-07-03-15277540202031.jpg",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"优化方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化方案","aria-hidden":"true"}},[s._v("#")]),s._v(" 优化方案")]),s._v(" "),t("ol",[t("li",[s._v("使用 BloomFilter代替 DataCache 来存储黑白名单;")]),s._v(" "),t("li",[s._v("及时清理占用大内存的临时变量;")])]),s._v(" "),t("h5",{attrs:{id:"布隆过滤器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#布隆过滤器","aria-hidden":"true"}},[s._v("#")]),s._v(" 布隆过滤器")]),s._v(" "),t("p",[t("img",{attrs:{src:"http://qiniu.dong4j.info/2019-07-03-15282678967621.jpg",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("简介:")])]),s._v(" "),t("p",[s._v("是一个很长的二进制向量和一系列随机映射函数. 布隆过滤器可以用于检索一个元素是否在一个集合中. 它的优点是空间效率和查询时间都远远超过一般的算法, 缺点是有一定的误识别率和删除困难.")]),s._v(" "),t("p",[t("strong",[s._v("原理:")])]),s._v(" "),t("p",[s._v("当一个元素被加入集合时, 通过K个散列函数将这个元素映射成一个位数组中的K个点, 把它们置为1. 检索时, 我们只要看看这些点是不是都是1就（大约）知道集合中有没有它了: 如果这些点有任何一个0, 则被检元素一定不在；如果都是1, 则被检元素很可能在.")]),s._v(" "),t("p",[t("strong",[s._v("优点:")])]),s._v(" "),t("p",[s._v("相比于其它的数据结构, 布隆过滤器在空间和时间方面都有巨大的优势. 布隆过滤器存储空间和插入/查询时间都是常数（O(k)）. 而且它不存储元素本身, 在某些对保密要求非常严格的场合有优势.")]),s._v(" "),t("p",[t("strong",[s._v("缺点")]),s._v(":")]),s._v(" "),t("p",[s._v("一定的误识别率和删除困难.")]),s._v(" "),t("h4",{attrs:{id:"开发建议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发建议","aria-hidden":"true"}},[s._v("#")]),s._v(" 开发建议")]),s._v(" "),t("p",[s._v("程序的运行会直接影响系统环境的变化, 从而影响 GC 的触发. 若不针对 GC 的特点进行设计和编码, 就会出现内存驻留等一系列负面影响.\n为了避免这些影响, 基本的原则就是尽可能地减少垃圾和减少 GC 过程中的开销. 具体措施包括以下几个方面:")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("不要显式调用 "),t("code",[s._v("System.gc()")])]),s._v(" "),t("p",[s._v("此函数建议 JVM 进行主 GC, 虽然只是建议而非一定, 但很多情况下它会触发主 GC, 从而增加主 GC 的频率, 也即增加了间歇性停顿的次数.")])]),s._v(" "),t("li",[t("p",[s._v("尽量减少临时对象的使用")]),s._v(" "),t("p",[s._v("临时对象在跳出函数调用后, 会成为垃圾, 少用临时变量就相当于减少了垃圾的产生.")])]),s._v(" "),t("li",[t("p",[s._v("对象不用时最好显式置为 null")]),s._v(" "),t("p",[s._v("一般而言, 为 null 的对象都会被作为垃圾处理, 所以将不用的对象显式地设为 null, 有利于 GC 收集器判定垃圾, 从而提高了 GC 的效率.")])]),s._v(" "),t("li",[t("p",[s._v("尽量少用静态对象变量")]),s._v(" "),t("p",[s._v("静态变量属于全局变量, 不会被 GC 回收, 它们会一直占用内存.")])])])])},[],!1,null,null,null);a.default=e.exports}}]);